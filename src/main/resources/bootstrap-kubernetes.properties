### Spring CLOUD KUBERNETES - CONFIG

## configmaps
# Enable ConfigMaps PropertySource (default true)
#spring.cloud.kubernetes.config.enabled = true

# Sets the name of ConfigMap to lookup (default ${spring.application.name})
#spring.cloud.kubernetes.config.name = ${spring.application.name}

# Sets the Kubernetes namespace where to lookup (default client namespace)
#spring.cloud.kubernetes.config.namespace =

# Sets the paths where ConfigMaps are mounted (default empty)
#spring.cloud.kubernetes.config.paths =

# Enable/Disable consuming ConfigMaps via APIs (default true)
#spring.cloud.kubernetes.config.enable-api = true

# [NOT-YET-DOCUMENTED] Kubernetes ConfigMaps name to be loaded (default ?)
#spring.cloud.kubernetes.config.sources                = ${spring.application.name}


## secrets
# Enable Secrets PropertySource (default true)
#spring.cloud.kubernetes.secrets.enabled = true

# Sets the name of Secret to lookup (default ${spring.application.name})
#spring.cloud.kubernetes.secrets.name = ${spring.application.name}

# Sets the Kubernetes namespace where to lookup (default client namespace)
#spring.cloud.kubernetes.secrets.namespace =

# Sets the labels used to lookup secrets (default empty)
#spring.cloud.kubernetes.secrets.labels =

# Sets the paths where Secrets are mounted (default empty)
#spring.cloud.kubernetes.secrets.paths =

# Enable/Disable consuming Secrets via APIs (default true)
#spring.cloud.kubernetes.secrets.enable-api = true

# [NOT-YET-DOCUMENTED] Kubernetes Secrets name to be loaded
#spring.cloud.kubernetes.secrets.sources = ${spring.application.name}


## reload
# Enable/Disable monitoring of property sources and configuration reload (default false)
spring.cloud.kubernetes.reload.enabled = true

# Allow monitoring changes in ConfigMaps (default true)
#spring.cloud.kubernetes.reload.monitoring-config-maps = true

# Allow monitoring changes in Secrects (default false)
#spring.cloud.kubernetes.reload.monitoring-secrets = false

# The strategy to use when firing a reload
# Supported strategies:
#   . refresh (default)
#       only configuration beans annotated with @ConfigurationProperties or @RefreshScope are reloaded.
#       This reload level leverages the refresh feature of Spring Cloud Context.
#   . restart_context
#       the whole Spring ApplicationContext is gracefully restarted. Beans are recreated with the new configuration.
#   . shutdown
#       the Spring ApplicationContext is shut down to activate a restart of the container. When using this level, make sure that the lifecycle
#       of all non-daemon threads is bound to the ApplicationContext and that a replication controller or replica set is configured to restart the pod.
#spring.cloud.kubernetes.reload.strategy               = refresh

# Specifies how to listen for changes in property sources
# Support modes:
#   . event (default)
#   . polling
#spring.cloud.kubernetes.reload.mode                   = event

# The period in milliseconds for verifying changes when using the polling strategy
#spring.cloud.kubernetes.reload.period  = 5000


## PLEASE NOTE
# NOT WORKING at the moment
spring.cloud.kubernetes.reload.mode    = polling
spring.cloud.kubernetes.reload.period  = 5000
