### Spring CLOUD KUBERNETES - CONFIG

## config
# Enable Secrets PropertySource
spring.cloud.kubernetes.config.enabled   = true

# Sets the name of ConfigMap to lookup
spring.cloud.kubernetes.config.name      = ${spring.application.name}

# Sets the Kubernetes namespace where to lookup
spring.cloud.kubernetes.config.namespace = default
#spring.cloud.kubernetes.config.namespace    = jx-staging

# Sets the paths where ConfigMaps are mounted
#spring.cloud.kubernetes.config.paths        =

# Enable/Disable consuming ConfigMaps via APIs
#spring.cloud.kubernetes.config.enable-api   = true

#spring.cloud.kubernetes.config.sources = ${spring.application.name}

## reload
# Enable/Disable external property sources refresh and reload
#spring.cloud.kubernetes.reload.enabled = true

# Supported levels of reload:
#   . refresh (default)
#       only configuration beans annotated with @ConfigurationProperties or @RefreshScope are reloaded.
#       This reload level leverages the refresh feature of Spring Cloud Context.
#   . restart_context
#       the whole Spring ApplicationContext is gracefully restarted. Beans are recreated with the new configuration.
#   . shutdown
#       the Spring ApplicationContext is shut down to activate a restart of the container. When using this level, make sure that the lifecycle
#       of all non-daemon threads is bound to the ApplicationContext and that a replication controller or replica set is configured to restart the pod.
#spring.cloud.kubernetes.reload.strategy     = refresh

# values: event (default) | polling
#spring.cloud.kubernetes.reload.mode    = event

#spring.cloud.kubernetes.reload.period  = 5000

#spring.cloud.kubernetes.reload.monitoring-config-maps = true

#spring.cloud.kubernetes.reload.monitoring-secrets=false
